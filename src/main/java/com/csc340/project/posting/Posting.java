package com.csc340.project.posting;
import com.csc340.project.tutor.Tutor;

import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "postings")

public class Posting {
    // Post id, works the same as all other ids we have done
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int postId;

    // Title of post
    @Column(nullable = false, length = 25)
    private String title;

    // Course relevant.  Examples: 'CSC 340' or 'CSC 340 - Software Programming', however tutor wants to write it.
    @Column(nullable = false, length = 30)
    private String course;

    // Just the time that the post was for lack of better words, posted.
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    // Posting description
    @Column(nullable = false, length = 100)
    private String postDescription;

    // Rate made by the tutor per session.
    @Column(nullable = false, length = 4)
    private String rate;

    // This refers to if the posting has already been claimed by a student or not.  Could possibly another for active/inactive if admin wants me to.
    @Column(nullable = false)
    boolean status;

    // This is the only nullable, if there is a student connected to the course, then add them here, if not, then it is null.
    @Column(length = 8)
    int studentId;


    // Set up relationship to tutors.  One tutor can have many postings.  Postings must have a tutor.
    @ManyToOne
    @JoinColumn(name = "tutor_id", nullable = false)
    // As the professor mentioned, putting this to mitigate it running infinitely on a postman request.  I learned the hard way lol.
    @JsonBackReference
    // Reference the tutor object.
    private Tutor tutor;



    // Automatically sets the timestamp before inserting into the DB.  PrePersist to ensure it is ran before the object is persisted.
    @PrePersist
    protected void onCreate() {
        this.createdAt = LocalDateTime.now();
    }

    // Always include a no-argument.
    public Posting() {}

    // Basic Getters and Setters.  Quite literally auto-generated by this beautiful IDE.

    public int getPostId() {
        return postId;
    }

    public void setPostId(int postId) {
        this.postId = postId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getCourse() {
        return course;
    }

    public void setCourse(String course) {
        this.course = course;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public String getPostDescription() {
        return postDescription;
    }

    public void setPostDescription(String postDescription) {
        this.postDescription = postDescription;
    }

    public String getRate() {
        return rate;
    }

    public void setRate(String rate) {
        this.rate = rate;
    }

    public boolean isStatus() {
        return status;
    }

    public void setStatus(boolean status) {
        this.status = status;
    }

    public int getStudentId() {
        return studentId;
    }

    public void setStudentId(int studentId) {
        this.studentId = studentId;
    }

    public Tutor getTutor() {
        return tutor;
    }

    public void setTutor(Tutor tutor) {
        this.tutor = tutor;
    }
}
